import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7859736492:AAGhN-jAfsjYnkyDIjf2CHdcRrztwl9jIZM"
ADMIN_ID = "306728906"
PAYMENT_URL = "https://pay.kaspi.kz/pay/iyzblpte"
VIDEO_URL = "https://shyngys001.github.io/gabitmarathon/"
SHEET_API_URL = "https://script.google.com/macros/s/AKfycbw5JdJPol9ZIwasv5fL3GLEK231Rl9-KQli35vrRX0vAZh_7jZceD9zwXPjpFP9X4tDvw/exec"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# üîÑ FSM –°–æ—Å—Ç–æ—è–Ω–∏—è
class OrderState(StatesGroup):
    waiting_for_payment = State()
    waiting_for_receipt = State()
    waiting_for_name = State()
    waiting_for_phone = State()

# üîî –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–∂–∏–º–∞
OBJECTION_MESSAGES = [
    "‚ùó <b>–ú–µ–Ω —Ç—ã—Ä—ã—Å—ã–ø –∫”©—Ä–¥—ñ–º, –±—ñ—Ä–∞“õ –º–∞“ì–∞–Ω –µ—à—Ç–µ“£–µ –∫”©–º–µ–∫—Ç–µ—Å–ø–µ–π–¥—ñ</b>\n\n‚û° –ë“±—Ä—ã–Ω“ì—ã ”ô–¥—ñ—Å—Ç–µ—Ä—ñ“£—ñ–∑ –Ω”ô—Ç–∏–∂–µ –±–µ—Ä–º–µ—Å–µ, –±“±–ª –¥“±—Ä—ã—Å –∂–æ–ª–º–µ–Ω –∞—Ä—ã“õ—Ç–∞–º–∞“ì–∞–Ω—ã“£—ã–∑–¥—ã –±—ñ–ª–¥—ñ—Ä–µ–¥—ñ.",
    "‚ùó <b>–ú–µ–Ω–¥–µ –º–æ—Ç–∏–≤–∞—Ü–∏—è –∂–µ—Ç—ñ—Å–ø–µ–π–¥—ñ</b>\n\n‚û° –°–æ–Ω–¥—ã“õ—Ç–∞–Ω —Å—ñ–∑–≥–µ –º–∞—Ä–∞—Ñ–æ–Ω –∫–µ—Ä–µ–∫! –ñ–∞–ª“ì—ã–∑ –±–∞—Å—Ç–∞—Å–∞“£—ã–∑, –º–æ—Ç–∏–≤–∞—Ü–∏—è“£—ã–∑ —Ç–µ–∑ ”©—à—ñ–ø “õ–∞–ª–∞–¥—ã.",
    "‚ùó <b>–ú–∞“ì–∞–Ω —É–∞“õ—ã—Ç —Ç–∞–ø—à—ã, –∂“±–º—ã—Å—ã–º –∫”©–ø</b>\n\n‚û° –ú–∞—Ä–∞—Ñ–æ–Ω —É–∞“õ—ã—Ç –∞–ª–º–∞–π–¥—ã! –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä –æ“£–∞–π, –æ–ª–∞—Ä–¥—ã ”©–∑ ”©–º—ñ—Ä—ñ“£—ñ–∑–≥–µ –±–µ–π—ñ–º–¥–µ–ø –∂–∞—Å–∞–π—Å—ã–∑.",
    "‚ùó <b>1000 —Ç–µ“£–≥–µ–≥–µ –Ω–µ “Ø–π—Ä–µ–Ω–µ–º? –¢–µ–≥—ñ–Ω –±–æ–ª—Å–∞ “õ–∞—Ç—ã—Å–∞—Ä –µ–¥—ñ–º</b>\n\n‚û° 1000 —Ç–≥ ‚Äì –±—ñ—Ä —à—ã–Ω—ã –∫–æ—Ñ–µ –±–∞“ì–∞—Å—ã. –ê–ª –º–∞—Ä–∞—Ñ–æ–Ω —Å—ñ–∑–≥–µ –¥–µ–Ω—Å–∞—É–ª—ã“õ, ”ô–¥–µ–º—ñ –¥–µ–Ω–µ, –∂–µ“£—ñ–ª–¥—ñ–∫ —Å–µ–∑—ñ–º—ñ–Ω –±–µ—Ä–µ–¥—ñ.",
    "‚ùó <b>–°–ø–æ—Ä—Ç—Å—ã–∑ –∞—Ä—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å</b>\n\n‚û° –ò”ô, —Å–ø–æ—Ä—Ç –ø–∞–π–¥–∞–ª—ã, –±—ñ—Ä–∞“õ –∞—Ä—ã“õ—Ç–∞—É–¥—ã“£ 80%-—ã –¥“±—Ä—ã—Å —Ç–∞–º–∞“õ—Ç–∞–Ω—É –º–µ–Ω –º–µ—Ç–∞–±–æ–ª–∏–∑–º–¥—ñ —Ä–µ—Ç—Ç–µ—É–≥–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã."
]

# üì¢ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∫ –í–∏–¥–µ–æ–Ω—ã –∫”©—Ä—É", url=VIDEO_URL)],
        [InlineKeyboardButton(text="‚úÖ –í–∏–¥–µ–æ–Ω—ã –∫”©—Ä–¥—ñ–º", callback_data="watched_video")]
    ])

    text = "<b>7 –∫“Ø–Ω–¥–µ 7 –∫–≥ —Ç–∞—Å—Ç–∞“ì—ã“£ –∫–µ–ª–µ –º–µ?</b>\n\n‚ùå –î–∏–µ—Ç–∞ –∂–æ“õ\n‚ùå –ê—à—Ç—ã“õ –∂–æ“õ\n‚ùå –°–ø–æ—Ä—Ç–∑–∞–ª–¥—ã“£ –∫–µ—Ä–µ–≥—ñ –∂–æ“õ\n\n‚úÖ –ö“Ø–Ω—ñ–Ω–µ 10-15 –º–∏–Ω—É—Ç—Ç—ã“õ –∂–µ“£—ñ–ª ”ô–¥—ñ—Å—Ç–µ—Ä\n‚úÖ –û—Ä–≥–∞–Ω–∏–∑–º–≥–µ “õ–∞—É—ñ–ø—Å—ñ–∑ –∂“Ø–π–µ\n‚úÖ 1000+ –∞–¥–∞–º–Ω—ã“£ –Ω”ô—Ç–∏–∂–µ –∞–ª“ì–∞–Ω —Ç”ô—Å—ñ–ª—ñ"
    
    await message.answer(text, reply_markup=keyboard)

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ "‚úÖ –í–∏–¥–µ–æ–Ω—ã –∫”©—Ä–¥—ñ–º"
@dp.callback_query(lambda c: c.data == "watched_video")
async def ask_payment(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –¢”©–ª–µ—É", url=PAYMENT_URL)],
        [InlineKeyboardButton(text="‚úÖ –¢”©–ª–µ–¥—ñ–º", callback_data="paid")]
    ])

    text = "<b>–ù”ô—Ç–∏–∂–µ–≥–µ 7 “õ–∞–¥–∞–º “õ–∞–ª–¥—ã!</b>\n\n‚ö° 7 –∫“Ø–Ω–¥–µ 7 –∫–≥ —Ç–∞—Å—Ç–∞—É –º–∞—Ä–∞—Ñ–æ–Ω—ã–Ω–∞ “õ–æ—Å—ã–ª! ‚ö°\n‚úÖ –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –¥–∞–π—ã–Ω –∂–æ—Å–ø–∞—Ä\n‚úÖ –ë–∞—Ä-–∂–æ“ì—ã 10-15 –º–∏–Ω—É—Ç—Ç—ã“õ ”ô–¥—ñ—Å—Ç–µ—Ä\n‚úÖ –ê—à—Ç—ã“õ –ø–µ–Ω “õ–∞—Ç–∞“£ –¥–∏–µ—Ç–∞—Å—ã–∑ –∂“Ø–π–µ"
    
    await callback.message.answer(text, reply_markup=keyboard)
    await state.set_state(OrderState.waiting_for_payment)
    asyncio.create_task(send_payment_reminders(callback.from_user.id, state))
    await callback.answer()

# üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–∂–∏–º–∞ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
async def send_payment_reminders(user_id, state: FSMContext):
    for i in range(5):
        await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
        current_state = await state.get_state()
        if current_state != OrderState.waiting_for_payment:
            break
        objection_text = OBJECTION_MESSAGES[i % len(OBJECTION_MESSAGES)]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –¢”©–ª–µ—É", url=PAYMENT_URL)],
            [InlineKeyboardButton(text="‚úÖ –¢”©–ª–µ–¥—ñ–º", callback_data="paid")]
        ])
        await bot.send_message(user_id, objection_text, reply_markup=keyboard)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ "–¢”©–ª–µ–¥—ñ–º"
@dp.callback_query(lambda c: c.data == "paid")
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìå –ß–µ–∫ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (—Ñ–æ—Ç–æ –Ω–µ–º–µ—Å–µ PDF).")
    await state.set_state(OrderState.waiting_for_receipt)
    await callback.answer()

# üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –∞–¥–º–∏–Ω—É, –∑–∞—Ç–µ–º –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@dp.message(OrderState.waiting_for_receipt)
async def receive_receipt(message: types.Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id
        await bot.send_photo(ADMIN_ID, file_id, caption="üí≥ –ñ–∞“£–∞ —á–µ–∫ –∫–µ–ª–¥—ñ!")
    elif message.document:
        file_id = message.document.file_id
        await bot.send_document(ADMIN_ID, file_id, caption="üí≥ –ñ–∞“£–∞ —á–µ–∫ –∫–µ–ª–¥—ñ!")
    else:
        await bot.send_message(ADMIN_ID, f"üí≥ –ñ–∞“£–∞ —á–µ–∫ –∫–µ–ª–¥—ñ!\n{message.text}")

    await message.answer("üìå –ê—Ç—ã“£—ã–∑ –∫—ñ–º?")
    await state.set_state(OrderState.waiting_for_name)

# üìû –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏
@dp.message(OrderState.waiting_for_name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑?")
    await state.set_state(OrderState.waiting_for_phone)

# ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
@dp.message(OrderState.waiting_for_phone)
async def save_client_data(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data.get("name", "–ê–Ω—ã“õ—Ç–∞–ª–º–∞“ì–∞–Ω")
    phone = message.text

    async with aiohttp.ClientSession() as session:
        await session.post(SHEET_API_URL, json={"name": name, "phone": phone})

    await bot.send_message(ADMIN_ID, f"üîî –ñ–∞“£–∞ —Ç”©–ª–µ–º!\nüë§ –ê—Ç—ã: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    await message.answer("üéâ –¢”©–ª–µ–º “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! “∞–π—ã–º–¥–∞—Å—Ç—ã—Ä—É—à—ã–ª–∞—Ä —Å—ñ–∑–¥—ñ —Ç–æ–ø“õ–∞ “õ–æ—Å–∞–¥—ã.")
    await state.clear()

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())