import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

TOKEN = "7859736492:AAGhN-jAfsjYnkyDIjf2CHdcRrztwl9jIZM"
ADMIN_ID = "1050963411"
PAYMENT_URL = "https://pay.kaspi.kz/pay/iyzblpte"
VIDEO_URL = "https://shyngys001.github.io/gabitmarathon/"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π parse_mode
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# üîÑ FSM –°–æ—Å—Ç–æ—è–Ω–∏—è
class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_payment = State()
    waiting_for_receipt = State()

# üì¢ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∫ –í–∏–¥–µ–æ–Ω—ã –∫”©—Ä—É", url=VIDEO_URL)],
        [InlineKeyboardButton(text="‚úÖ –í–∏–¥–µ–æ–Ω—ã –∫”©—Ä–¥—ñ–º", callback_data="watched_video")]
    ])

    text = """<b>7 –∫“Ø–Ω–¥–µ 7 –∫–≥ —Ç–∞—Å—Ç–∞“ì—ã“£ –∫–µ–ª–µ –º–µ?</b>

‚ùå –î–∏–µ—Ç–∞ –∂–æ“õ
‚ùå –ê—à—Ç—ã“õ –∂–æ“õ
‚ùå –°–ø–æ—Ä—Ç–∑–∞–ª–¥—ã“£ –∫–µ—Ä–µ–≥—ñ –∂–æ“õ

‚úÖ –ö“Ø–Ω—ñ–Ω–µ 10-15 –º–∏–Ω—É—Ç—Ç—ã“õ –∂–µ“£—ñ–ª ”ô–¥—ñ—Å—Ç–µ—Ä
‚úÖ –û—Ä–≥–∞–Ω–∏–∑–º–≥–µ “õ–∞—É—ñ–ø—Å—ñ–∑ –∂“Ø–π–µ
‚úÖ 1000+ –∞–¥–∞–º–Ω—ã“£ –Ω”ô—Ç–∏–∂–µ –∞–ª“ì–∞–Ω —Ç”ô—Å—ñ–ª—ñ

–¢–µ–≥—ñ–Ω –≤–∏–¥–µ–æ–Ω—ã –∫”©—Ä—ñ–ø, –±“Ø–≥—ñ–Ω–Ω–µ–Ω –±–∞—Å—Ç–∞–ø –∞—Ä—ã“õ—Ç–∞—É–¥—ã –±–∞—Å—Ç–∞!"""
    
    await message.answer(text, reply_markup=keyboard)
    await state.clear()

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ "‚úÖ –í–∏–¥–µ–æ–Ω—ã –∫”©—Ä–¥—ñ–º"
@dp.callback_query(lambda c: c.data == "watched_video")
async def ask_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìå –ê—Ç—ã“£—ã–∑ –∫—ñ–º?")
    await state.set_state(OrderState.waiting_for_name)
    await callback.answer()

# üìû –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(OrderState.waiting_for_name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑?")
    await state.set_state(OrderState.waiting_for_phone)

# üí≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
@dp.message(OrderState.waiting_for_phone)
async def ask_payment(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –¢”©–ª–µ—É", url=PAYMENT_URL)],
        [InlineKeyboardButton(text="‚úÖ –¢”©–ª–µ–¥—ñ–º", callback_data="paid")]
    ])

    text = """<b>–ù”ô—Ç–∏–∂–µ–≥–µ 7 “õ–∞–¥–∞–º “õ–∞–ª–¥—ã!</b>

‚ö° 7 –∫“Ø–Ω–¥–µ 7 –∫–≥ —Ç–∞—Å—Ç–∞—É –º–∞—Ä–∞—Ñ–æ–Ω—ã–Ω–∞ “õ–æ—Å—ã–ª! ‚ö°
‚úÖ –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –¥–∞–π—ã–Ω –∂–æ—Å–ø–∞—Ä
‚úÖ –ë–∞—Ä-–∂–æ“ì—ã 10-15 –º–∏–Ω—É—Ç—Ç—ã“õ ”ô–¥—ñ—Å—Ç–µ—Ä
‚úÖ –ê—à—Ç—ã“õ –ø–µ–Ω “õ–∞—Ç–∞“£ –¥–∏–µ—Ç–∞—Å—ã–∑ –∂“Ø–π–µ
‚úÖ –ù–∞“õ—Ç—ã –Ω”ô—Ç–∏–∂–µ –∞–ª“ì–∞–Ω 1000+ –∞–¥–∞–º–Ω—ã“£ ”ô–¥—ñ—Å—ñ

–ë“Ø–≥—ñ–Ω –±–∞—Å—Ç–∞“ì–∞–Ω–¥–∞—Ä ‚Äì 7 –∫“Ø–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω –∞–π–Ω–∞–¥–∞–Ω ”©–∑—ñ–Ω–µ —Ä–∏–∑–∞ –±–æ–ª–∞–¥—ã!

<b>–û—Ä–Ω—ã“£–¥—ã –∞–ª ‚Äì –±–∞—Ä –±–æ–ª“ì–∞–Ω—ã 3000 —Ç–≥!</b>"""
    
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(OrderState.waiting_for_payment)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ "–¢”©–ª–µ–¥—ñ–º"
@dp.callback_query(lambda c: c.data == "paid")
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìå –ß–µ–∫ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")
    await state.set_state(OrderState.waiting_for_receipt)
    await callback.answer()

# üì© –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
@dp.message(OrderState.waiting_for_receipt)
async def save_client_data(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data.get("name", "–ê–Ω—ã“õ—Ç–∞–ª–º–∞“ì–∞–Ω")
    phone = user_data.get("phone", "–ê–Ω—ã“õ—Ç–∞–ª–º–∞“ì–∞–Ω")
    receipt = message.text

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É
    admin_text = f"""üîî <b>–ñ–∞“£–∞ —Ç”©–ª–µ–º!</b>

üë§ –ê—Ç—ã: {name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üí≥ –ß–µ–∫: {receipt}"""
    
    await bot.send_message(ADMIN_ID, admin_text)
    await message.answer("üéâ –¢”©–ª–µ–º “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! “∞–π—ã–º–¥–∞—Å—Ç—ã—Ä—É—à—ã–ª–∞—Ä —Å—ñ–∑–¥—ñ —Ç–æ–ø“õ–∞ “õ–æ—Å–∞–¥—ã.")

    await state.clear()

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())